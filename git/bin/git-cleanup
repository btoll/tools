#!/bin/bash

FILTER=${GIT_DEFAULT_FILTER:-"EXTJS*"}
REPO=${GIT_DEFAULT_REPO:-"origin"}
BRANCHES=`git branch --merged`
HEAD=`git rev-parse --abbrev-ref HEAD`
WARN="!!!WARNING!!! HEAD will be deleted!"
GO=true

usage() {
    echo "Optional flags:"
    echo "-f    The filter to use for existing local branches."
    echo "      Defaults to 'EXTJS*'"
    echo
    echo "-l    Will operate in DRY RUN mode.  Will list all branches to be deleted."
    echo "      This is useful (and safe) when you are not sure which branches will be removed by the filter."
    echo
    echo "-r    The name of the remote repository from which to delete the branch."
    echo "      Defaults to 'origin'"
}

# Swap out for user-provided options if given.
while getopts "f:hlr:" OPTION; do
    case $OPTION in
        f)
            FILTER=$OPTARG
            ;;
        h)
            usage
            exit 0
            ;;
        l)
            DRY_RUN=true
            ;;
        r)
            REPO=$OPTARG
            ;;
    esac
done

if [ "$DRY_RUN" = true ]; then
    echo "[DRY RUN] The following branches will be removed:"
fi

for BRANCH in $BRANCHES; do
    # Let's operate on only the desired branches.
    if [[ "$BRANCH" =~ $FILTER ]]; then
        if [ "$HEAD" = "$BRANCH" ]; then
            MATCHED="$WARN Maybe move to a base branch?"
        fi

        if [ "$DRY_RUN" = true ]; then
            echo $BRANCH
        else
            if [ -n "$MATCHED" ]; then
                echo $WARN
                read -p "Continue anyway? [y/n]" CONTINUE
                if [ "$CONTINUE" = "n" ]; then
                    GO=false
                fi

                # Unset so the warning message doesn't display again below.
                unset MATCHED
            fi

            if [ "$GO" = true ]; then
                echo `git branch -d $BRANCH`
                echo `git push $REPO :$BRANCH`
            fi
        fi
    fi
done

if [ -n "$MATCHED" ]; then
    echo $MATCHED
fi
